<?xml version="1.0"?>
<launch>
    <arg name="namespace" value="husky_blue"/>
    <group ns="$(arg namespace)">
        <remap from="/diagnostics" to="diagnostics" />
        <remap from="/diagnostics_toplevel_state" to="diagnostics_toplevel_state" />
        <remap from="/diagnostics_agg" to="diagnostics_agg" />
        <remap from="e_stop" to="/e_stop" />


        <arg name="multimaster" default="$(optenv ROBOT_MULTIMASTER false)"/>
        <arg name="simulation" default="$(optenv ROBOT_SIMULATION false)"/>
        <arg name="robot_namespace" default="$(optenv ROBOT_NAMESPACE robot)"/>
        <arg name="enable_ekf" default="$(optenv ENABLE_EKF true)"/>

        <arg name="config_extras" default="$(eval optenv('HUSKY_CONFIG_EXTRAS', find('husky_control') + '/config/empty.yaml'))"/>

        <arg name="laser_enabled" default="$(optenv HUSKY_LMS1XX_ENABLED false)"/>
        <arg name="realsense_enabled" default="$(optenv HUSKY_REALSENSE_ENABLED false)"/>
        <arg name="urdf_extras" default="$(optenv HUSKY_URDF_EXTRAS)"/>

        <include file="$(find multimaster_launch)/launch/multimaster_robot.launch" if="$(arg multimaster)">
            <arg name="gazebo_interface" value="$(find husky_control)/config/gazebo_interface.yaml" />
            <arg name="public_interface" value="$(find husky_control)/config/public_interface.yaml" />
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
            <arg name="simulation" value="$(arg simulation)"/>
        </include>

        <!-- Load robot description -->
        <include file="$(find husky_description)/launch/description.launch">
            <arg name="laser_enabled" default="$(arg laser_enabled)"/>
            <arg name="realsense_enabled" default="$(arg realsense_enabled)"/>
            <arg name="urdf_extras" default="$(arg urdf_extras)"/>
        </include>

        <!-- Load controller configuration -->
        <rosparam command="load" file="$(find husky_control)/config/control.yaml" />

        <!-- Spawn controllers -->
        <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller"/>

        <!-- Start EKF for localization -->
        <group if="$(arg enable_ekf)">
            <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
                <rosparam command="load" file="$(find husky_control)/config/localization.yaml" />
            </node>
        </group>

        <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
            <param name="link_name" value="base_link" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

        <node pkg="twist_mux" type="twist_mux" name="twist_mux">
            <!-- <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" /> -->            
            <rosparam>
            topics:
            - name    : joy
              topic   : joy_teleop/cmd_vel
              timeout : 0.5
              priority: 10
            - name    : interactive_marker
              topic   : twist_marker_server/cmd_vel
              timeout : 0.5
              priority: 8
            - name    : external
              topic   : cmd_vel
              timeout : 0.5
              priority: 1
            locks:
            - name    : e_stop
              topic   : /e_stop
              timeout : 1.0
              priority: 255
            </rosparam>
            <!-- <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/> -->
            <remap from="cmd_vel_out" to="e_stop_cmd_vel"/>
        </node>

        <arg name="x_vel_scaling" value="1.00012501562695"/>
        <arg name="y_vel_scaling" value="1.0"/> <!-- Note that there is no Y direction movement -->
        <arg name="th_vel_scaling" value="1.0531650642236"/>

        <node pkg="topic_tools" type="transform" name="inv_kin_scaling" args="/$(arg namespace)/e_stop_cmd_vel husky_velocity_controller/cmd_vel geometry_msgs/Twist 'geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=$(arg x_vel_scaling)*m.linear.x,y=$(arg y_vel_scaling)*m.linear.y,z=m.linear.z),angular=geometry_msgs.msg.Vector3(x=m.angular.x,y=m.angular.y,z=$(arg th_vel_scaling)*m.angular.z))' --import geometry_msgs std_msgs">
        </node>

        <node pkg="topic_tools" type="transform" name="fwd_kin_scaling" args="/$(arg namespace)/husky_velocity_controller/odom vel_feedback geometry_msgs/Twist 'geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=1.0/$(arg x_vel_scaling)*m.twist.twist.linear.x,y=1.0/$(arg y_vel_scaling)*m.twist.twist.linear.y,z=m.twist.twist.linear.z),angular=geometry_msgs.msg.Vector3(x=m.twist.twist.angular.x,y=m.twist.twist.angular.y,z=1.0/$(arg th_vel_scaling)*m.twist.twist.angular.z))' --import nav_msgs geometry_msgs std_msgs">
        </node>

        <!-- Override the default control parameters, see config/empty.yaml for default. -->
        <rosparam command="load" file="$(arg config_extras)" />
    </group>
</launch>